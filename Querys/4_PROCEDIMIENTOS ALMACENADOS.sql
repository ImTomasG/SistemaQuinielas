GO
USE DB_QUINIELAS
GO

IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_CREARLIGA')
DROP PROCEDURE SP_CREARLIGA
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_TLIGA')
DROP PROCEDURE SP_TLIGA
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_INVITACIONEMAIL')
DROP PROCEDURE SP_INVITACIONEMAIL
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_ENVIOSOLICITUD')
DROP PROCEDURE SP_ENVIOSOLICITUD
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_APROBARSOLICITUD')
DROP PROCEDURE SP_APROBARSOLICITUD
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_APOSTAR')
DROP PROCEDURE SP_APOSTAR
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_INGRESAR_SEDE')
DROP PROCEDURE SP_INGRESAR_SEDE
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_INGRESAR_TEAM')
DROP PROCEDURE SP_INGRESAR_TEAM
GO

IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_REGISTRO')
DROP PROCEDURE SP_REGISTRO
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_CREDENCIALES')
DROP PROCEDURE SP_CREDENCIALES
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_ACTUALIZACION_RESULTADOS')
DROP PROCEDURE SP_ACTUALIZACION_RESULTADOS
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_POSICION_LIGA')
DROP PROCEDURE SP_POSICION_LIGA
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_PRIMEROSLUGARES_PREMIOS')
DROP PROCEDURE SP_PRIMEROSLUGARES_PREMIOS
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_LIGAGANADORA_PREMIOS')
DROP PROCEDURE SP_LIGAGANADORA_PREMIOS
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_INGRESOJORNADAS')
DROP PROCEDURE SP_INGRESOJORNADAS
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_INGRESOESTADIOS')
DROP PROCEDURE SP_INGRESOESTADIOS
GO
IF EXISTS (SELECT * FROM sys.objects WHERE TYPE = 'p' AND name = 'SP_INGRESOPARTIDOS')
DROP PROCEDURE SP_INGRESOPARTIDOS
GO


/*CREACION DE LIGA */
CREATE PROC SP_CREARLIGA(
@ID_USUARIO INT,
@NOMBRE_LIGA VARCHAR (20),
@TIPO_LIGA VARCHAR (20),
@PRECIO NUMERIC (10,2),
@ID_ROL INT
)AS
-- VERIFICA SI EXISTE YA UNA LIGA CON EL NOMBRE INGRESADO POR EL USUARIO
DECLARE @CONTADOR_USUARIO INT
SELECT @CONTADOR_USUARIO = COUNT(U.ID_USUARIO) FROM USUARIO U WHERE U.ID_USUARIO = @ID_USUARIO
-- VERIFICA SI EXISTE YA UNA LIGA CON EL NOMBRE INGRESADO POR EL USUARIO
DECLARE @CONTADOR_LIGA INT
SELECT @CONTADOR_LIGA = COUNT(L.ID_LIGA) FROM LIGA L WHERE L.NOMBRE_LIGA = @NOMBRE_LIGA
-- VARIABLE QUE ALMACENA EL ID DE LA LIGA
DECLARE @ID_LIGA INT

IF(@CONTADOR_USUARIO > 0)
	BEGIN
		IF(@CONTADOR_LIGA < 1)
			BEGIN
				INSERT INTO LIGA (PRECIO, NOMBRE_LIGA, ID_TIPOLIGA)
				VALUES (@PRECIO, @NOMBRE_LIGA, @TIPO_LIGA);
				SELECT @ID_LIGA = LG.ID_LIGA FROM LIGA LG WHERE LG.NOMBRE_LIGA = @NOMBRE_LIGA;
				INSERT INTO USUARIOLIGA (ID_USUARIO, ID_LIGA, ID_ROL)
				VALUES (@ID_USUARIO, @ID_LIGA, @ID_ROL);

				SELECT 'NUEVA LIGA GENERADA CORRECTAMENTE' AS MENSAJE
			END
		ELSE
			BEGIN
				SELECT 'EL NOMBRE DE LA LIGA YA SE ENCUENTRA REGISTRADO.' AS MENSAJE
			END
	END
ELSE
	BEGIN
		SELECT 'EL USUARIO NO EXISTE' AS MENSAJE
	END
GO



/*1. El administrador indica si la liga creada es de apuesta o de diversión */
CREATE PROC SP_TLIGA(
@ID_LIGAS INT,
@ID_TIPOLIGAS INT
)AS	
BEGIN
	--REVISA SI LA LIGA EXISTE
	IF EXISTS (SELECT * FROM LIGA  WHERE ID_LIGA = @ID_LIGAS )
		BEGIN 
			UPDATE LIGA SET  ID_TIPOLIGA = @ID_TIPOLIGAS
			WHERE ID_LIGA =@ID_LIGAS;

			SELECT LS.ID_LIGA, LS.PRECIO, LS.NOMBRE_LIGA, LS.ID_TIPOLIGA, TLS.NOMBRE_TIPOLIGA,'' AS MENSAJE_ERROR
			FROM LIGA LS
			JOIN TIPO_LIGA TLS ON LS.ID_TIPOLIGA = TLS.ID_TIPOLIGA
			WHERE LS.ID_LIGA = @ID_LIGAS;
		END
	ELSE
		BEGIN
			SELECT 'LA LIGA NO EXISTE' AS MENSAJE_ERROR
		END
END
GO



/*2. El administrador puede enviar invitaciones por medio de email */

CREATE PROC SP_INVITACIONEMAIL(
@ID_LIGA INTEGER,
@EMAIL VARCHAR (30)
)AS
DECLARE @CONTADOR INT
DECLARE @IdUsuario INT
DECLARE @Existencia INT
--VERIFICA SI EL EMAIL YA SE ENCUENTRA REGISTRADO
SELECT @CONTADOR = COUNT(U.ID_USUARIO) FROM USUARIO U WHERE U.CORREO = @EMAIL

IF(@CONTADOR = 1)
	BEGIN
		--- Guardamos el ID de usuario --- 
		SELECT @IdUsuario = ID_Usuario 
		FROM USUARIO u
		Where u.CORREO = @EMAIL;
		---VERIFICAR SI YA EXISTE UNA INVITACION A DICHO USUARIO PARA CIERTA LIGA ---
		SELECT @Existencia = count(*) FROM INVITACIONES I Where i.ID_LIGA=@ID_LIGA AND i.ID_USUARIO=@IdUsuario
		IF(@Existencia<1)
			BEGIN
				INSERT INTO INVITACIONES(ID_USUARIO,ID_LIGA,STATUS)
				VALUES(@IdUsuario,@ID_LIGA,1)
				SELECT 'Invitacion registrada correctamente.' AS MENSAJE
			END
		ELSE
			SELECT 'Ya se ha invitado a este usuario para la liga seleccionada.' AS MENSAJE
	END
ELSE
	BEGIN
		SELECT 'El correo ingresado no se encuentra registrado, verifiquelo e ingrese nuevamente.' AS MENSAJE
	END


GO


/*3. LOS USUARIOS DEBEN PODER BUSCAR EL NOMBRE DE LAS LIGAS Y MANDAR SOLICITUD DE UNIÓN */
CREATE PROC SP_ENVIOSOLICITUD(
@IDUSUARIO INTEGER,
@NOMLIGA VARCHAR (20)
)AS
DECLARE @CONTADOR INT
DECLARE @IDLIGA INT
DECLARE @EXISTENCIA INT
---VERIFICAR SI EXISTE LA LIGA---
SELECT @CONTADOR = COUNT(*) FROM LIGA I WHERE I.NOMBRE_LIGA=@NOMLIGA 

IF(@CONTADOR = 1)
	BEGIN
		--- GUARDAMOS EL ID DE LIGA --- 
		SELECT @IDLIGA =  L.ID_LIGA
		FROM LIGA L
		WHERE L.NOMBRE_LIGA=@NOMLIGA
		SELECT @EXISTENCIA = COUNT(*) FROM INVITACIONES I WHERE I.ID_LIGA=@IDLIGA AND I.ID_USUARIO=@IDUSUARIO
		IF(@EXISTENCIA<1)
		BEGIN
		INSERT INTO INVITACIONES(ID_USUARIO,ID_LIGA,STATUS)
		VALUES(@IDUSUARIO,@IDLIGA,0) --- STATUS = 0 PENDIENTE POR APROBAR, 1 APROBADO, 2 DENEGADO --- 
		SELECT 'SOLICITUD REGISTRADA CORRECTAMENTE.' AS MENSAJE
		END
		ELSE
		SELECT 'YA SE ENCUENTRA REGISTRADA UNA SOLICITUD PARA LA LIGA SELECCIONADA.' AS MENSAJE
	END
ELSE
	BEGIN
		SELECT 'LA LIGA SOLICITADA NO SE ENCUENTRA REGISTRADA.' AS MENSAJE
	END


GO


/*4. EL ADMINISTRADOR DEBE APROBAR LA INVITACIONES DE LOS USUARIOS */
CREATE PROC SP_APROBARSOLICITUD(
@RESPUESTA INTEGER, --- 1 APROBADO, 2 DENEGADO ---
@IDUSUARIO INTEGER,
@IDLIGA INTEGER
)AS
DECLARE @CONTADOR INT
DECLARE @EXISTENCIA INT
---VERIFICAR SI EXISTE LA SOLICITUD---
SELECT @CONTADOR = COUNT(*)
FROM INVITACIONES I
WHERE I.ID_LIGA =@IDLIGA AND I.ID_USUARIO =@IDUSUARIO 

IF(@CONTADOR = 1)
	BEGIN
		UPDATE INVITACIONES
		SET STATUS=@RESPUESTA--- STATUS =  1 APROBADO, 2 DENEGADO --- 
		WHERE ID_USUARIO=@IDUSUARIO AND ID_LIGA=@IDLIGA
		IF @RESPUESTA=1
		  SELECT 'SOLICITUD APROBADA.' AS MENSAJE

		ELSE
		  SELECT 'SOLICITUD DENEGADA.' AS MENSAJE

		
	END
ELSE
	BEGIN
		SELECT 'LA SOLICITUD NO EXISTE.' AS MENSAJE
	END


GO


/*5. CADA USUARIO DEBERÁ HACER UN VATICINIO DE CADA PARTIDO (CANTIDAD DE GOLES DEL LOCAL Y VISITANTE)  */
CREATE PROC SP_APOSTAR(
@IDJORNADA VARCHAR(10),
@IDUSUARIO INTEGER,
@IDLIGA INTEGER,
@IDLOCAL VARCHAR(10),
@IDVISITANTE VARCHAR(10),
@APUESTALOCAL INTEGER,
@APUESTAVISITANTE INTEGER
)AS
DECLARE @CONTADOR INT
DECLARE @IDROL VARCHAR(30)
DECLARE @FECHA DATE
---VERIFICAR SI EXISTE LA APUESTA---
SELECT @CONTADOR =  COUNT(*) FROM APUESTA A
WHERE A.ID_JORNADA=@IDJORNADA AND A.ID_USUARIO=@IDUSUARIO AND A.ID_LIGA = @IDLIGA AND A.ID_EQUIPOLOCAL = @IDLOCAL AND A.ID_EQUIPOVISITANTE=@IDVISITANTE;

--- EXTRAER ID ROL DEL USUARIO---
SELECT @IDROL =  R.ID_ROL
FROM ROL_USUARIO R
INNER JOIN USUARIOLIGA U ON R.ID_ROL = U.ID_ROL
WHERE U.ID_USUARIO=@IDUSUARIO

--FECHA---
SELECT @FECHA = GETDATE();

-----
IF(@CONTADOR < 1)
	BEGIN
		INSERT INTO APUESTA (ID_JORNADA,ID_USUARIO,ID_LIGA,ID_EQUIPOLOCAL,ID_EQUIPOVISITANTE,FECHA,APUESTA_LOCAL,APUESTA_VISITANTE,ID_ROL)
		VALUES(@IDJORNADA,@IDUSUARIO,@IDLIGA,@IDLOCAL,@IDVISITANTE,@FECHA,@APUESTALOCAL,@APUESTAVISITANTE,@IDROL);
		SELECT 'APUESTA REGISTRADA CON EXITO.' AS MENSAJE	
	END
ELSE
	BEGIN
		SELECT 'YA HA APOSTADO ANTERIORMENTE POR ESTE PARTIDO.' AS MENSAJE
	END

GO



--POR LA ADMINISTRACION--
/*1. INGRESAR INFORMACIÓN DE SEDE DÓNDE SE REALIZA EL MUNDIAL  */
CREATE PROC SP_INGRESAR_SEDE(
@IDESTADIO VARCHAR(10),
@NOMBREESTADIO VARCHAR(30)
)AS
DECLARE @CONTADOR INT

---VERIFICAR SI EXISTE LA APUESTA---
SELECT @CONTADOR =  COUNT(*) FROM ESTADIOS E
		WHERE E.ID_ESTADIO=@IDESTADIO;

-----
IF(@CONTADOR < 1)
	BEGIN
		INSERT INTO ESTADIOS
		VALUES(@IDESTADIO,@NOMBREESTADIO);
		SELECT E.ID_ESTADIO, E.NOMBRE_ESTADIO, 'ESTADIO REGISTRADO CON EXITO.' AS MENSAJE
		FROM ESTADIOS E
		WHERE E.ID_ESTADIO = @IDESTADIO
		
	END
ELSE
	BEGIN
		SELECT E.ID_ESTADIO, E.NOMBRE_ESTADIO, 'EL ESTADIO YA EXISTE' AS MENSAJE
		FROM ESTADIOS E
		WHERE E.ID_ESTADIO = @IDESTADIO
	END

GO





/*2. INGRESAR INFORMACIÓN DE PAISES CLASIFICADOS |  3. INGRESAR CÓMO ESTÁN FORMADOS LOS GRUPOS (EQUIPO Y GRUPO)*/
CREATE PROC SP_INGRESAR_TEAM (
@IDEQUIPO VARCHAR(10),
@NOMBREEQUIPO VARCHAR(30),
@IDGRUPO VARCHAR(10)
)AS
DECLARE @CONTADOR_EQUIPO INT
DECLARE @CONTADOR_GRUPO INT

---VERIFICAR SI EXISTE EL EQUIPO---
SELECT @CONTADOR_EQUIPO =  COUNT(*) FROM EQUIPOS E
WHERE E.ID_EQUIPO=@IDEQUIPO;
-------------------------
---VERIFICAR SI EXISTE EL GRUPO---
SELECT @CONTADOR_GRUPO =  COUNT(*) FROM GRUPOS G
WHERE G.ID_GRUPO = @IDGRUPO
-------------------------		 
-----
IF(@CONTADOR_GRUPO = 1)
	BEGIN
		IF(@CONTADOR_EQUIPO < 1)
			BEGIN
				INSERT INTO EQUIPOS VALUES(@IDEQUIPO,@NOMBREEQUIPO,@IDGRUPO)
				SELECT 'EQUIPO REGISTRADO CON EXITO' AS MENSAJE
			END
		ELSE
			BEGIN
				SELECT 'EL EQUIPO YA EXISTE.' AS MENSAJE
			END
	END
ELSE
	BEGIN
		SELECT 'EL GRUPO DONDE VA A REGISTRAR AL EQUIPO NO EXISTE.' AS MENSAJE
	END

GO

















/*REGISTRO DE NUEVAS PERSONAS*/
CREATE PROC SP_REGISTRO(
@NOMBRES VARCHAR (50),
@APELLIDOS VARCHAR (50),
@TELEFONO INTEGER,
@EMAIL VARCHAR (30),
@PASSWORD VARCHAR (30)
)AS
DECLARE @CONTADOR INT
--VERIFICA SI EL EMAIL YA SE ENCUENTRA REGISTRADO
SELECT @CONTADOR = COUNT(U.ID_USUARIO) FROM USUARIO U WHERE U.CORREO = @EMAIL

IF(@CONTADOR < 1)
	BEGIN
		INSERT INTO USUARIO(NOMBRES,APELLIDOS,TELEFONO,CORREO,CONTRASEÑA)
		VALUES(@NOMBRES,@APELLIDOS,@TELEFONO,@EMAIL,@PASSWORD)
	END
ELSE
	BEGIN
		SELECT 'El correo ingresado se encuentra repetido, por favor inténtelo nuevamente.' AS MENSAJE_ERROR
	END



GO


/*INICIO DE SESIÓN EN EL SISTEMA*/
CREATE PROC SP_CREDENCIALES(
@EMAIL VARCHAR (30),
@PASSWORD VARCHAR (30)
)AS
BEGIN
SELECT U.ID_USUARIO, U.NOMBRES, U.APELLIDOS, U.TELEFONO, U.CORREO
FROM USUARIO U
WHERE U.CORREO = @EMAIL AND U.CONTRASEÑA = @PASSWORD
END
GO



/*INGRESO POR PARTE DE LA ADMINISTRACION LOS RESULTADOS FINALES DE CADA ENCUENTRO (GOLES DE LOCAL Y GOLES DE VISITANTE) Y ENTREGA DE PUNTOS A CADA APUESTA DE LOS USUARIOS*/
CREATE PROC SP_ACTUALIZACION_RESULTADOS(
@ID_JORNADA VARCHAR (10),
@ID_EQUIPOLOCAL VARCHAR (10),
@ID_EQUIPOVISITANTE VARCHAR(10),
@GOLES_LOCAL INTEGER,
@GOLES_VISITANTE INTEGER
)AS
DECLARE @CONTADOR INT
--VERIFICA SI EN LA JORNADA INGRESADA POR EL USUARIO SE ENFRENTARON EL EQUIPO LOCAL Y EL EQUIPO VISITANTE
SELECT @CONTADOR = COUNT(ID_JORNADA) FROM PARTIDOS P WHERE P.ID_JORNADA = @ID_JORNADA AND P.ID_EQUIPOLOCAL = @ID_EQUIPOLOCAL AND P.ID_EQUIPOVISITANTE = @ID_EQUIPOVISITANTE

IF(@CONTADOR > 0)
	BEGIN
		--ACTUALIACIÓN DEL RESULTADO DE LOS PARTIDOS EN LA TABLA PARTIDOS
		UPDATE PARTIDOS SET
		GOLES_LOCAL = @GOLES_LOCAL,
		GOLES_VISITANTE = @GOLES_VISITANTE
		WHERE ID_JORNADA = @ID_JORNADA AND ID_EQUIPOLOCAL = @ID_EQUIPOLOCAL AND ID_EQUIPOVISITANTE = @ID_EQUIPOVISITANTE

		--ASIGNACIÓN DE PUNTOS A LOS USUARIOS DE ACUERDO AL RESULTADO DEL PARTIDO INGRESADO
		IF(@GOLES_LOCAL>@GOLES_VISITANTE)
			BEGIN
				UPDATE APUESTA SET
				PUNTOS_OBTENIDOS = 1
				WHERE ID_JORNADA = @ID_JORNADA AND ID_EQUIPOLOCAL = @ID_EQUIPOLOCAL AND ID_EQUIPOVISITANTE = @ID_EQUIPOVISITANTE AND APUESTA_LOCAL > APUESTA_VISITANTE

				UPDATE APUESTA SET
				PUNTOS_OBTENIDOS = 3
				WHERE ID_JORNADA = @ID_JORNADA AND ID_EQUIPOLOCAL = @ID_EQUIPOLOCAL AND ID_EQUIPOVISITANTE = @ID_EQUIPOVISITANTE AND APUESTA_LOCAL = @GOLES_LOCAL AND APUESTA_VISITANTE = @GOLES_VISITANTE
			END
		ELSE IF(@GOLES_LOCAL<@GOLES_VISITANTE)
			BEGIN
				UPDATE APUESTA SET
				PUNTOS_OBTENIDOS = 1
				WHERE ID_JORNADA = @ID_JORNADA AND ID_EQUIPOLOCAL = @ID_EQUIPOLOCAL AND ID_EQUIPOVISITANTE = @ID_EQUIPOVISITANTE AND APUESTA_LOCAL < APUESTA_VISITANTE

				UPDATE APUESTA SET
				PUNTOS_OBTENIDOS = 3
				WHERE ID_JORNADA = @ID_JORNADA AND ID_EQUIPOLOCAL = @ID_EQUIPOLOCAL AND ID_EQUIPOVISITANTE = @ID_EQUIPOVISITANTE AND APUESTA_LOCAL = @GOLES_LOCAL AND APUESTA_VISITANTE = @GOLES_VISITANTE
			END
		ELSE
			BEGIN
				UPDATE APUESTA SET
				PUNTOS_OBTENIDOS = 1
				WHERE ID_JORNADA = @ID_JORNADA AND ID_EQUIPOLOCAL = @ID_EQUIPOLOCAL AND ID_EQUIPOVISITANTE = @ID_EQUIPOVISITANTE AND APUESTA_LOCAL = APUESTA_VISITANTE

				UPDATE APUESTA SET
				PUNTOS_OBTENIDOS = 3
				WHERE ID_JORNADA = @ID_JORNADA AND ID_EQUIPOLOCAL = @ID_EQUIPOLOCAL AND ID_EQUIPOVISITANTE = @ID_EQUIPOVISITANTE AND APUESTA_LOCAL = @GOLES_LOCAL AND APUESTA_VISITANTE = @GOLES_VISITANTE
			END

	END
ELSE
	BEGIN
		SELECT 'El partido no existe, por favor inténtalo nuevamente.' AS MENSAJE_ERROR
	END
GO




/*MOSTRAR LAS POSICIONES DE CADA USUARIO DE ACUERDO A LOS PUNTOS ACUMULADOS QUE POSEA*/
CREATE PROC SP_POSICION_LIGA(
@ID_LIGA INTEGER
)AS
BEGIN
	SELECT L.ID_LIGA,L.NOMBRE_LIGA,U.ID_USUARIO,U.NOMBRES,U.APELLIDOS,SUM(A.PUNTOS_OBTENIDOS) AS ACUMULACION_PUNTOS
	FROM USUARIO U
	JOIN USUARIOLIGA UL ON U.ID_USUARIO = UL.ID_USUARIO
	JOIN LIGA L ON UL.ID_LIGA = L.ID_LIGA
	JOIN APUESTA A ON UL.ID_USUARIO = A.ID_USUARIO AND UL.ID_LIGA = A.ID_LIGA AND UL.ID_ROL = A.ID_ROL
	WHERE L.ID_LIGA = @ID_LIGA
	GROUP BY L.ID_LIGA,L.NOMBRE_LIGA,U.ID_USUARIO,U.NOMBRES,U.APELLIDOS
	ORDER BY 1 ASC, 6 DESC

END
GO




/*EXTRAER EL 1% DE TODAS LAS LIGAS Y EL 0.5% REPARTIRLO ENTRE LOS TRES PRIMEROS LUGARES DE CADA LIGA CONFIGURADA COMO DE APUESTAS*/
CREATE PROC SP_PRIMEROSLUGARES_PREMIOS
AS

--SE DECLARA LA VARIABLE QUE ALMACENARÁ LA REPARTICIÓN DEL 0.5% DEL 1% DEL PAGO DE TODAS LAS LIGAS CONFIGURADAS COMO TIPO DE APUESTAS
DECLARE @CANTIDAD NUMERIC (10,2)
--SE DECLARA VARIABLE PARA CONTAR LA CANTIDAD DE LIGAS QUE SON CONFIGURADAS COMO TIPO APUESTA
DECLARE @CONTADOR INTEGER

--SE REGISTRA LA CANTIDAD DE LIGAS TIPO APUSETA
SELECT @CONTADOR = COUNT(L.ID_LIGA) FROM LIGA L WHERE L.ID_TIPOLIGA = 1
--SE ASIGNA EL 0.5% DEL 1% DE LAS LIGAS TIPO APUESTA
SELECT @CANTIDAD = (((SUM(P.MONTO)*0.005)/@CONTADOR)/3) FROM LIGA L JOIN USUARIOLIGA UL ON L.ID_LIGA = UL.ID_LIGA JOIN PAGO P ON UL.ID_USUARIO = P.ID_USUARIO AND UL.ID_LIGA = P.ID_LIGA AND UL.ID_ROL = P.ID_ROL WHERE L.ID_TIPOLIGA = 1


BEGIN
	WITH POSICIONES AS
	(
	SELECT L.ID_LIGA,L.NOMBRE_LIGA,U.ID_USUARIO,U.NOMBRES,U.APELLIDOS,SUM(A.PUNTOS_OBTENIDOS) AS ACUMULACION_PUNTOS, ROW_NUMBER() OVER(PARTITION BY L.ID_LIGA ORDER BY SUM(A.PUNTOS_OBTENIDOS) DESC) AS POSICIONFILAS
	FROM USUARIO U
	JOIN USUARIOLIGA UL ON U.ID_USUARIO = UL.ID_USUARIO
	JOIN LIGA L ON UL.ID_LIGA = L.ID_LIGA
	JOIN APUESTA A ON UL.ID_USUARIO = A.ID_USUARIO AND UL.ID_LIGA = A.ID_LIGA AND UL.ID_ROL = A.ID_ROL
	WHERE L.ID_TIPOLIGA = 1

	GROUP BY L.ID_LIGA,L.NOMBRE_LIGA,U.ID_USUARIO,U.NOMBRES,U.APELLIDOS
	)
	SELECT *, @CANTIDAD AS MONTO_ASIGNADO
	FROM POSICIONES
	WHERE POSICIONFILAS <= 3;

END
GO





/*EL OTRO 0.5% SE REPARTE PARA PREMIAR A LA LIGA QUE EN PROMEDIO TENDRÁ MÁS PUNTOS ACUMULADOS A CADA PARTICIPANTE DE LA LIGA*/
CREATE PROC SP_LIGAGANADORA_PREMIOS
AS

--SE DECLARA LA VARIABLE QUE ALMACENARÁ EL ID DE LA LIGA QUE POSEE UN MEJOR PROMEDIO DE PUNTUACION DE TODAS LAS LIGAS CONFIGURADAS COMO DE APUESTA
DECLARE @LIGA_GANADORA INTEGER
--SE DECLARA VARIABLE CONTADOR PARA CONTAR CUANTAS PERSONAS SE ENCUENTRAN EN LA LIGA CON MEJOR PROMEDIO DE PUNTUACIÓN DE TODAS LAS LIGAS CONFIGURADAS COMO APUESTA
DECLARE @CONTADOR INTEGER
--SE DECLARA LA VARIABLE QUE ALMACENARÁ LA REPARTICIÓN DEL 0.5% DEL 1% DEL PAGO DE TODAS LAS LIGAS CONFIGURADAS COMO TIPO DE APUESTAS
DECLARE @CANTIDAD NUMERIC (10,2)



--SE ALMACENA EN LA VARIABLE "LIGA_GANADORA" LA LIGA QUE POSEE EL MEJOR PROMEDIO DE PUNTUACIÓN DE TODAS LAS LIGAS CONFIGURADAS COMO DE APUESTA
SELECT @LIGA_GANADORA = GANADOR.ID_LIGA
FROM
(
	SELECT TOP 1 CONTEO.ID_LIGA, AVG(CAST(CONTEO.ACUMULACION_PUNTOS AS FLOAT)) PROMEDIO_PUNTAJE
	FROM
	(
		SELECT L.ID_LIGA,U.ID_USUARIO,SUM(A.PUNTOS_OBTENIDOS) AS ACUMULACION_PUNTOS
		FROM USUARIO U
		JOIN USUARIOLIGA UL ON U.ID_USUARIO = UL.ID_USUARIO
		JOIN LIGA L ON UL.ID_LIGA = L.ID_LIGA
		JOIN APUESTA A ON UL.ID_USUARIO = A.ID_USUARIO AND UL.ID_LIGA = A.ID_LIGA AND UL.ID_ROL = A.ID_ROL
		WHERE L.ID_TIPOLIGA = 1
		GROUP BY L.ID_LIGA,L.NOMBRE_LIGA,U.ID_USUARIO,U.NOMBRES,U.APELLIDOS
	) AS CONTEO
	GROUP BY CONTEO.ID_LIGA
	ORDER BY 2 DESC
) AS GANADOR
--SE REGISTRA LA CANTIDAD DE PERSONAS QUE PERTENECEN A LA LIGA GANADORA
SELECT @CONTADOR = COUNT(UL.ID_USUARIO) FROM USUARIOLIGA UL WHERE UL.ID_LIGA = @LIGA_GANADORA
--SE ASIGNA EL 0.5% DEL 1% DE LAS LIGAS TIPO APUESTA
SELECT @CANTIDAD = ((SUM(P.MONTO)*0.005)/@CONTADOR) FROM LIGA L JOIN USUARIOLIGA UL ON L.ID_LIGA = UL.ID_LIGA JOIN PAGO P ON UL.ID_USUARIO = P.ID_USUARIO AND UL.ID_LIGA = P.ID_LIGA AND UL.ID_ROL = P.ID_ROL WHERE L.ID_TIPOLIGA = 1


BEGIN
	SELECT L.ID_LIGA,L.NOMBRE_LIGA,U.ID_USUARIO,U.NOMBRES,U.APELLIDOS, @CANTIDAD AS MONTO_ASIGNADO
	FROM USUARIO U
	JOIN USUARIOLIGA UL ON U.ID_USUARIO = UL.ID_USUARIO
	JOIN LIGA L ON UL.ID_LIGA = L.ID_LIGA
	JOIN APUESTA A ON UL.ID_USUARIO = A.ID_USUARIO AND UL.ID_LIGA = A.ID_LIGA AND UL.ID_ROL = A.ID_ROL
	WHERE L.ID_TIPOLIGA = 1 AND L.ID_LIGA = @LIGA_GANADORA

	GROUP BY L.ID_LIGA,L.NOMBRE_LIGA,U.ID_USUARIO,U.NOMBRES,U.APELLIDOS
END
GO


/*INGRESO DE JORNADAS*/
CREATE PROC SP_INGRESOJORNADAS(
@ID_JORNADA VARCHAR (10),
@NOMBRE_JORNADA VARCHAR (20)
) AS
DECLARE @CONTADOR INT
SELECT @CONTADOR = COUNT(J.ID_JORNADA) FROM JORNADA J WHERE J.ID_JORNADA = @ID_JORNADA

IF(@CONTADOR < 1)
	BEGIN
		INSERT INTO JORNADA (ID_JORNADA,NOMBRE_JORNADA)
		VALUES(@ID_JORNADA,@NOMBRE_JORNADA);
		SELECT 'JORNADA INGRESADA CON ÉXITO' AS MENSAJE	
	END
ELSE
	BEGIN
		SELECT 'EL ID_JORNADA SE ENCUENTRA REPETIDO, POR FAVOR INTÉNTELO NUEVAMENTE.' AS MENSAJE
	END
GO

/*INGRESO DE ESTADIOS*/
CREATE PROC SP_INGRESOESTADIOS(
@ID_ESTADIO VARCHAR (10),
@NOMBRE_ESTADIO VARCHAR (30)
) AS
DECLARE @CONTADOR INT
SELECT @CONTADOR = COUNT(E.ID_ESTADIO) FROM ESTADIOS E WHERE E.ID_ESTADIO = @ID_ESTADIO

IF(@CONTADOR < 1)
	BEGIN
		INSERT INTO ESTADIOS(ID_ESTADIO,NOMBRE_ESTADIO)
		VALUES(@ID_ESTADIO,@NOMBRE_ESTADIO);
		SELECT 'ESTADIO INGRESADO CON ÉXITO' AS MENSAJE	
	END
ELSE
	BEGIN
		SELECT 'EL ID_ESTADIO SE ENCUENTRA REPETIDO, POR FAVOR INTÉNTELO NUEVAMENTE.' AS MENSAJE
	END
GO

/*INGRESO DE LA INFORMACIÓN DE PARTIDOS*/
CREATE PROC SP_INGRESOPARTIDOS(
@ID_JORNADA VARCHAR (10),
@ID_EQUIPOLOCAL VARCHAR (10),
@ID_EQUIPOVISITANTE VARCHAR (10),
@ID_ESTADIO VARCHAR (10),
@FECHA DATETIME
) AS
DECLARE @CONTADOR INT
SELECT @CONTADOR = COUNT (P.ID_JORNADA) FROM PARTIDOS P WHERE P.ID_JORNADA = @ID_JORNADA AND P.ID_EQUIPOLOCAL = @ID_EQUIPOLOCAL AND P.ID_EQUIPOVISITANTE = @ID_EQUIPOVISITANTE

IF(@CONTADOR < 1)
	BEGIN
		INSERT INTO PARTIDOS(ID_JORNADA,ID_EQUIPOLOCAL,ID_EQUIPOVISITANTE,ID_ESTADIO,FECHA)
		VALUES(@ID_JORNADA,@ID_EQUIPOLOCAL,@ID_EQUIPOVISITANTE,@ID_ESTADIO,@FECHA);
		SELECT 'PARTIDO INGRESADO CON ÉXITO' AS MENSAJE	
	END
ELSE
	BEGIN
		SELECT 'EL PARTIDO SE ENCUENTRA REPETIDO, POR FAVOR INTÉNTELO NUEVAMENTE.' AS MENSAJE
	END
GO
